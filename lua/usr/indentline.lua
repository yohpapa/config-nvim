--[[ local status_ok, indentline = pcall(require, "indentmini") ]]
--[[ if not status_ok then ]]
--[[   vim.notify("indentmini not found.") ]]
--[[   return ]]
--[[ end ]]
--[[]]
--[[ indentline.setup({ ]]
--[[ --  char = "▎" ]]
--[[ --  char = "" ]]
--[[ char = "󰇝" ]]
--[[ }) ]]
--[[]]
--[[ vim.cmd.highlight("default link IndentLine Comment") ]]

local status_ok, indentline = pcall(require, "ibl")
if not status_ok then
  vim.notify("ibl not found.")
  return
end

indentline.setup()

--[[ local highlight = { ]]
--[[   "RainbowRed", ]]
--[[   "RainbowYellow", ]]
--[[   "RainbowBlue", ]]
--[[   "RainbowOrange", ]]
--[[   "RainbowGreen", ]]
--[[   "RainbowViolet", ]]
--[[   "RainbowCyan", ]]
--[[ } ]]
--[[]]
--[[ local status_hooks_status, hooks = pcall(require, "ibl.hooks") ]]
--[[ if not status_hooks_status then ]]
--[[   vim.notify("ibl.hooks not found.") ]]
--[[   return ]]
--[[ end ]]
--[[]]
--[[ local status_rainbow_ok, _ = pcall(require, "rainbow-delimiters") ]]
--[[ if not status_rainbow_ok then ]]
--[[   vim.notify("rainbow_delimiters not found.") ]]
--[[   return ]]
--[[ end ]]
--[[]]
--[[ -- create the highlight groups in the highlight setup hook, so they are reset ]]
--[[ -- every time the colorscheme changes ]]
--[[ hooks.register(hooks.type.HIGHLIGHT_SETUP, function() ]]
--[[   vim.api.nvim_set_hl(0, "RainbowRed", { fg = "#E06C75" }) ]]
--[[   vim.api.nvim_set_hl(0, "RainbowYellow", { fg = "#E5C07B" }) ]]
--[[   vim.api.nvim_set_hl(0, "RainbowBlue", { fg = "#61AFEF" }) ]]
--[[   vim.api.nvim_set_hl(0, "RainbowOrange", { fg = "#D19A66" }) ]]
--[[   vim.api.nvim_set_hl(0, "RainbowGreen", { fg = "#98C379" }) ]]
--[[   vim.api.nvim_set_hl(0, "RainbowViolet", { fg = "#C678DD" }) ]]
--[[   vim.api.nvim_set_hl(0, "RainbowCyan", { fg = "#56B6C2" }) ]]
--[[ end) ]]
--[[]]
--[[ vim.g.rainbow_delimiters = { highlight = highlight } ]]
--[[]]
--[[ local status_ok, indentline = pcall(require, "ibl") ]]
--[[ if not status_ok then ]]
--[[   vim.notify("ibl not found.") ]]
--[[   return ]]
--[[ end ]]
--[[]]
--[[ indentline.setup {scope = { highlight = highlight }} ]]
--[[]]
--[[ hooks.register(hooks.type.SCOPE_HIGHLIGHT, hooks.builtin.scope_highlight_from_extmark) ]]
